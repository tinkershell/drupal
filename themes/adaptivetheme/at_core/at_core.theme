<?php

/**
 * @file
 * Functions to support theming in Adaptivetheme sub-themes.
 */

use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Tags;
use Drupal\Component\Utility\Html;
use Symfony\Component\Yaml\Parser;
use Drupal\at_core\Layout\LayoutLoad;

require_once __DIR__ . '/vendor/Mobile_Detect/Mobile_Detect.php';

/**
 * Alter attachments (typically assets) to a page before it is rendered.
 *
 * Use this hook when you want to remove or alter attachments on the page, or
 * add attachments to the page that depend on another module's attachments (this
 * hook runs after hook_page_attachments().
 *
 * @param array &$page
 *   An empty renderable array representing the page.
 *
 * @see hook_page_attachments_alter()
 */
function at_core_page_attachments_alter(array &$page) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  if ($theme === 'seven') {
    return;
  }

  // Common paths.
  $path_to_theme = \Drupal::theme()->getActiveTheme()->getPath();
  $generated_files_path = NULL;

  if (!empty($config['generated_files_path'])) {
    $generated_files_path = $config['generated_files_path'];
  }
  else {
    drupal_set_message(t('The path to generated CSS files is not saved in configuration, try saving your themes Appearance settings.'), 'error');
  }

  // Attach at.settings, we need the ajaxPageState theme name.
  $page['#attached']['library'][] = 'at_core/at.settings';

  // Attach module dependant libraries.
  // These libraries are declared in your themeName.libraries.yml and we only
  // load if the module is installed. Unlike core these files will load on every
  // page, so when CSS aggregation is on there will only be one CSS aggregate
  // for the theme.
  $module_libraries = array(
    'aggregator',
    'book',
    'comment',
    'contact',
    'forum',
    'search',
    'taxonomy',
  );
  foreach ($module_libraries as $module_library) {
    if (\Drupal::moduleHandler()->moduleExists($module_library) == TRUE) {
      $page['#attached']['library'][] = "$theme/$module_library";
    }
  }

  // Process extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {

    // Fonts.
    if (isset($config['enable_fonts']) && $config['enable_fonts'] === 1) {
      // Fonts generated CSS.
      if (file_exists($generated_files_path . '/fonts.css')) {
        $page['#attached']['library'][] = "$theme/fonts";
      }
      // Google font URL.
      if (isset($config['font_use_google_fonts']) && $config['font_use_google_fonts'] == 1) {
        $page['#attached']['library'][] = "$theme/google_fonts";
      }
      // Typekit ID and JS.
      if (isset($config['font_use_typekit']) && $config['font_use_typekit'] == 1) {
        $page['#attached']['library'][] = "$theme/typekit_id";
        $page['#attached']['library'][] = 'at_core/at.typekit';
      }
    }

    // Titles.
    if (isset($config['enable_titles']) && $config['enable_titles'] === 1) {
      if (file_exists($generated_files_path . '/title-styles.css')) {
        $page['#attached']['library'][] = "$theme/title_styles";
      }
    }

    // Mobile blocks
    if (isset($config['enable_mobile_blocks']) && $config['enable_mobile_blocks'] === 1) {
      if (file_exists($generated_files_path . '/mobile-blocks.css')) {
        $page['#attached']['library'][] = "$theme/mobile_blocks";
      }
    }

    // Custom CSS.
    if (isset($config['enable_custom_css']) && $config['enable_custom_css'] === 1) {
      if (file_exists($generated_files_path . '/custom-css.css')) {
        $page['#attached']['library'][] = "$theme/custom_css";
      }
    }

    // Markup Overrides
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {

      // Responsive tables
      if (isset($config['responsive_tables']) && $config['responsive_tables'] === 1) {
        $page['#attached']['library'][] = "$theme/responsive_tables";
      }

      // Breadcrumbs.
      if (!empty($config['breadcrumb_separator'])) {
        if (file_exists($generated_files_path . '/breadcrumb.css')) {
          $page['#attached']['library'][] = "$theme/breadcrumb";
        }
      }

      // Login block.
      // Just load the login block CSS without the currentUser check.
      if (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1) {
        if (file_exists($generated_files_path . '/login-block.css')) {
          $page['#attached']['library'][] = "$theme/login_block";
        }
      }
    }

    // Devel assets.
    if (isset($config['enable_devel']) && $config['enable_devel'] === 1) {

      // Attach Windowsize library
      if (isset($config['show_window_size']) && $config['show_window_size'] === 1) {
        $page['#attached']['library'][] = 'at_core/at.windowsize';
      }

      // Attach devel_layout CSS file.
      if (isset($config['devel_layout']) && $config['devel_layout'] === 1) {
         $page['#attached']['library'][] = 'at_core/at.devel_debug_layout';
      }

      // Attach devel_colorize-regions CSS file.
      if ((isset($config['devel_color_regions']) && $config['devel_color_regions'] === 1) && (isset($config['devel_layout']) && $config['devel_layout'] === 0)) {
        $page['#attached']['library'][] = 'at_core/at.devel_colorize_regions';
      }

      // Attach show_grid.
      if (isset($config['show_grid']) && $config['show_grid'] === 1) {
        $page['#attached']['library'][] = "$theme/show_grid";
      }

      // Attach nuke_toolbar CSS file.
      if (isset($config['nuke_toolbar']) && $config['nuke_toolbar'] === 1) {
        $page['#attached']['library'][] = 'at_core/at.devel_nuke_toolbar';
      }
    }

    // Shortcodes
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      $shortcodes_yml = $path_to_theme . '/' . $theme . '.shortcodes.yml';
      if (file_exists($shortcodes_yml)) {
        $shortcodes_parser = new Parser();
        $shortcodes = $shortcodes_parser->parse(file_get_contents($shortcodes_yml));
        unset($shortcodes['animate']);
        foreach ($shortcodes as $class_type => $class_values) {
          if (isset($config['shortcodes_' . $class_type . '_enable']) && $config['shortcodes_' . $class_type . '_enable'] === 1) {
            $page['#attached']['library'][] = "$theme/shortcodes_$class_type";
          }
        }
      }

      // Animate has its own naming convention, being a vendor library.
      if (isset($config['shortcodes_animate_enable']) && $config['shortcodes_animate_enable'] === 1) {
        $page['#attached']['library'][] = "$theme/animate";
      }
    }

    // Add the responsive menu styles settings.
    if (isset($config['enable_responsive_menus']) && $config['enable_responsive_menus'] === 1) {

      // Load Responsive menu dependencies.
      $page['#attached']['library'][] = "$theme/responsive_menus";

      $responsivemenu_settings = array();

      // Breakpoint
      if (isset($config['responsive_menu_breakpoint'])) {
        $responsivemenu_settings['bp'] = $config['responsive_menu_breakpoint'];
      }

      // Loop the config settings to find selected menu styles.
      foreach (array('default', 'responsive') as $style) {
        if (isset($config['responsive_menu_' . $style . '_style'])) {

          // Load the library for each selected menu style.
          $page['#attached']['library'][] = "$theme/responsive_menus_" . $config['responsive_menu_' . $style . '_style'];

          // Set drupalSettings
          $responsivemenu_settings[$style] = 'ms-' . $config['responsive_menu_' . $style . '_style'];
        }
      }

      // Attach JS settings.
      $page['#attached']['drupalSettings'][$theme]['at_responsivemenus'] = $responsivemenu_settings;
    }

    // Attach poly-fills to support IE8.
    if (isset($config['enable_legacy_browsers']) && $config['enable_legacy_browsers'] === 1) {
      if (isset($config['legacy_browser_polyfills']) && $config['legacy_browser_polyfills'] === 1) {
        $page['#attached']['library'][] = 'at_core/at.respond';
        $page['#attached']['library'][] = 'at_core/at.selectivizr';
      }
    }

    // Load slideshow files
    if (isset($config['enable_slideshows']) && $config['enable_slideshows'] === 1) {

      // Get config settings and jam them into drupalSettings.
      if (isset($config['slideshow_count']) && $config['slideshow_count'] >= 1) {

        $basic_slider_settings = array(
          'animation',
          'direction',
          'smoothheight',
          'slideshowspeed',
          'animationspeed',
          'controlnav',
          'directionnav',
        );

        $carousel_settings = array(
          'as_carousel',
          'itemwidth',
          'itemmargin',
          'minitems',
          'maxitems',
          'move',
        );

        $advanced_slider_settings = array(
          'pauseonaction',
          'pauseonhover',
          'animationloop',
          'reverse',
          'randomize',
          'autostart', // Flexslider calls this "slideshow"
          'initdelay',
          'easing',
          'usecss',
          'touch',
          'video',
          'prevtext',
          'nexttext',
          'slideshow_class',
          'selector',
        );

        $slider_settings = array();
        for ($i = 0; $i < $config['slideshow_count']; $i++) {

          // Set a key
          $ss_key = Html::cleanCssIdentifier($theme . '-slideshow-' . $i);

          if (isset($config['slideshow_' . $i . '_enable']) && $config['slideshow_' . $i . '_enable'] == 1) {

            // Basic settings
            foreach ($basic_slider_settings as $basic_slider_setting) {
              if (isset($config['slideshow_' . $i . '_' . $basic_slider_setting])) {
                $slider_settings[$ss_key][$basic_slider_setting] = $config['slideshow_' . $i . '_' . $basic_slider_setting];
              }
            }

            // As Carousel
            if (isset($config['slideshow_' . $i . '_as_carousel']) && $config['slideshow_' . $i . '_as_carousel'] == 1) {
              foreach ($carousel_settings as $carousel_setting) {
                if (isset($config['slideshow_' . $i . '_' . $carousel_setting])) {
                  $slider_settings[$ss_key][$carousel_setting] = $config['slideshow_' . $i . '_' . $carousel_setting];
                }
              }
              // Reset options for carousels, fade won't work and vertical causes issues with Flexslider.
              $slider_settings[$ss_key]['animation'] = 'slide';
              $slider_settings[$ss_key]['direction'] = 'horizonal';
            }

            // Advanced options
            foreach ($advanced_slider_settings as $advanced_slider_setting) {
              if (isset($config['slideshow_' . $i . '_' . $advanced_slider_setting])) {
                $slider_settings[$ss_key][$advanced_slider_setting] = $config['slideshow_' . $i . '_' . $advanced_slider_setting];
              }
            }
          }
        }

        // Attach JS settings.
        if (!empty($slider_settings)) {
          $page['#attached']['drupalSettings'][$theme]['at_slideshows'] = $slider_settings;
          $page['#attached']['library'][] = 'at_core/at.slideshow';
          $page['#attached']['library'][] = "$theme/slideshow_styles";
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * @param array $suggestions
 * @param array $variables
 */
function at_core_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }

  // Show template suggestions.
  if (\Drupal::currentUser()->hasPermission('administer themes')) {
    if (isset($config['enable_devel']) && $config['enable_devel'] === 1) {
      if (isset($config['show_page_suggestions']) && $config['show_page_suggestions'] === 1) {
        if ($suggestions) {
          foreach ($suggestions as $suggestion_name) {
            if ($suggestion_name == 'page__') {
              $suggestion_name = str_replace('_', '', $suggestion_name);
            }
            $formatted_suggestions[] = str_replace('_', '-', $suggestion_name);
          }
          $these_suggestions = array(
            '#theme' => 'item_list',
            '#items' => $formatted_suggestions,
          );
          $saved_formatted_suggestions = \Drupal::service('renderer')->render($these_suggestions);
          drupal_set_message(t('Template suggestions for this page:<br>@these_suggestions <p>To stop showing these turn it off in your themes Appearance settings - see the Devel tab.</p>', array('@these_suggestions' => $saved_formatted_suggestions)), 'status');
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * TODO: keep on on https://drupal.org/node/2247677
 * @param array $suggestions
 * @param array $variables
 */
function at_core_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function at_core_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function at_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  switch ($form_id) {
    case 'user_login_form':
      if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
        if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
          if (isset($config['login_block_placeholder_labels']) && $config['login_block_placeholder_labels'] === 1) {
            $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
            $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];
            $form['name']['#title_display'] = 'invisible';
            $form['pass']['#title_display'] = 'invisible';
            $form['#attributes']['class'][] = 'has-placeholders';
          }
        }
      }
      break;

    case 'search_block_form':
      $form['keys']['#size'] = '';
      if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
        if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
          if (isset($config['search_block_hide_submit']) && $config['search_block_hide_submit'] === 1) {
            $form['actions']['#attributes']['class'][] = 'visually-hidden';
            $form['#attributes']['class'][] = 'submit-is-hidden';
          }
          else {
            $form['#attributes']['class'][] = 'submit-is-visible';
          }
          if (isset($config['search_block_placeholder_text']) && !empty($config['search_block_hide_submit'])) {
            $form['keys']['#attributes']['placeholder'] = $config['search_block_placeholder_text'];
            $form['keys']['#attributes']['class'][] = 'has-attribute-placeholder';
            $form['#attributes']['class'][] = 'has-placeholder';
          }
        }
      }

      // This is cool for browsers that support it, but it's hard to theme,
      // really it needs the modernizr test "input[search] search event" so we
      // can theme webkit on Mac without messing with other browsers.
      //$form['keys']['#attributes']['results'] = 5;
      //$form['keys']['#attributes']['autosave'] = $theme . '-search-results-form-submissions';
      break;

    case 'search_form':
      $form['basic']['#attributes']['class'][] = 'search-basic';
      unset($form['basic']['#attributes']['class'][array_search('container-inline', $form['basic']['#attributes']['class'])]);
      break;

    case 'node_preview_form_select':
      $form['backlink']['#options']['attributes']['class'][] = 'button';
      break;
  }
}

/**
 * Preprocess variables for html templates.
 * @param $variables
 */
function at_core_preprocess_html(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Common paths
  $path_to_theme = $variables['directory'];

  // Add theme variables, we use these to set a class and provide a very easy
  // way for themers to link to files in the theme, such as background images
  // or other files.
  $variables['theme']['name'] = Html::escape($theme);
  $variables['theme']['path'] = $path_to_theme;

  // Set the skip navigation target ID
  $variables['skip_link_target'] = '#block-' . $theme . '-content';

  // Defaults for Appearance setting variables.
  $variables['touch_icons'] = FALSE;
  // BC, deprecated.
  $variables['googlefonts_url'] = '';
  $variables['typekit_id'] = '';

  // Inject path info into variables, we can use the query path to set a body
  // class for pager pages.
  $variables['path_info'] = parse_url(Xss::filter($_SERVER['REQUEST_URI']));
  $query = isset($variables['path_info']['query']) ? Html::cleanCssIdentifier($variables['path_info']['query']) : NULL;
  $variables['path_info']['query'] = (strlen($query) > 25) ? substr($query, 0, 25) : $query;

  // Extensions
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {

    // Skip navigation target setting.
    if (isset($config['skip_link_target'])) {
      $variables['skip_link_target'] = '#' . Html::cleanCssIdentifier($config['skip_link_target']);
    }

    // Apple touch icons - low, medium and high (see the Apple docs).
    if (isset($config['enable_touch_icons']) && $config['enable_touch_icons'] === 1) {
      $variables['touch_icons'] = TRUE;
      $variables['touch_rel'] = 'apple-touch-icon';

      if (isset($config['apple_touch_icon_precomposed']) && $config['apple_touch_icon_precomposed'] === 1) {
        $variables['touch_rel'] = 'apple-touch-icon-precomposed';
      }

      // Apple default icon and Nokia shortcut icon.
      if (isset($config['icon_path_default']) && !empty($config['icon_path_default'])) {
        $default_icon = file_create_url($path_to_theme . '/' . Html::escape($config['icon_path_default']));
        $variables['touch_icon_nokia'] = $default_icon;
        $variables['touch_icon_default'] = $default_icon;
      }

      // iPad (standard display).
      if (isset($config['apple_touch_icon_path_ipad']) && !empty($config['apple_touch_icon_path_ipad'])) {
        $variables['touch_icon_ipad'] = file_create_url($path_to_theme . '/' . $config['apple_touch_icon_path_ipad']);
      }

      // iPhone retina.
      if (isset($config['apple_touch_icon_path_iphone_retina']) && !empty($config['apple_touch_icon_path_iphone_retina'])) {
        $variables['touch_icon_iphone_retina'] = file_create_url($path_to_theme . '/' . $config['apple_touch_icon_path_iphone_retina']);
      }

      // iPad retina.
      if (isset($config['apple_touch_icon_path_ipad_retina']) && !empty($config['apple_touch_icon_path_ipad_retina'])) {
        $variables['touch_icon_ipad_retina'] = file_create_url($path_to_theme . '/' . $config['apple_touch_icon_path_ipad_retina']);
      }
    }

    // Shortcodes.
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['page_classes_body'])) {
        $shortcodes = Tags::explode($config['page_classes_body']);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
        }
      }
    }
  }

  // Add mobile classes for global theming based on mobile or tablet devices.
  $detect = new Mobile_Detect;
  $isMobile = $detect->isMobile();
  $isTablet = $detect->isTablet();
  $mobile_detect_settings = array();
  if ($isMobile == 1) {
    $variables['attributes']['class'][] = 'is-mobile';
    $mobile_detect_settings['device'][] = 'is-mobile';
  }
  if ($isTablet == 1) {
    $variables['attributes']['class'][] = 'is-tablet';
    $mobile_detect_settings['device'][] = 'is-tablet';
  }
  $variables['mobile_detect'] = $detect;
  $variables['#attached']['drupalSettings'][$theme]['at_mobiledetect'] = $mobile_detect_settings;

  // Add all breakpoints to drupalSettings (key:media query).
  $breakpoints_module = \Drupal::moduleHandler()->moduleExists('breakpoint');
  if ($breakpoints_module == TRUE) {
    $breakpoints_array = array();
    if (isset($config['breakpoint_group_layout'])) {
      $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup($config['breakpoint_group_layout']);

      foreach ($breakpoints as $breakpoint_key => $breakpoint_values) {
        $breakpoint_label =  strtolower($breakpoint_values->getLabel()->getUntranslatedString());
        $breakpoints_array[$breakpoint_label]['breakpoint'] = $breakpoint_key;
        $breakpoints_array[$breakpoint_label]['mediaquery'] = $breakpoint_values->getMediaQuery();
      }

      $variables['#attached']['drupalSettings'][$theme]['at_breakpoints'] = $breakpoints_array;
    }
  }
}

/**
 * Preprocess variables for page templates.
 * @param $variables
 */
function at_core_preprocess_page(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Set attribution.
  $attribution_url = Url::fromUri('http://adaptivethemes.com');
  $attribution_link_options = array(
    'attributes' => array(
      'class' => array('attribution__link'),
      'target' => '_blank',
    ),
  );
  $attribution_url->setOptions($attribution_link_options);
  $variables['attribution'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="l-pr attribution"><div class="l-rw">',
    '#markup' => \Drupal::l(t('Design by Adaptivethemes.com'), $attribution_url),
    '#suffix' => '</div></div>',
  );

  // Disallow access if attribution link is toggled off.
  if (isset($config['attribution_toggle']) && $config['attribution_toggle'] === 0) {
    $variables['attribution']['#access'] = FALSE;
  }

  // Process extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['page_classes_page'])) {
        $shortcodes = Tags::explode($config['page_classes_page']);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
        }
      }
    }
  }

  // Layout Attributes
  // Add dynamic classes to each region wrapper (.regions).
  // This adds two classes to every wrapper:
  //  - "arc--[n]" active region count in this row, e.g. "arc--2".
  //  - "hr--[n-n]" has regions, by source order, e.g. "hr--1-3".
  $regions = system_region_list($theme, REGIONS_VISIBLE);
  $active_regions = array();

  // Render early because themes cannot check renderable arrays to determine visibility.
  // This is a critical issue in D8 (and D7 also): https://www.drupal.org/node/953034
  // Early rendering is the only way I have found to reliably set the layout.
  foreach ($regions as $region_name => $region_label) {
    if (!empty($variables['page'][$region_name])) {
      if ($region = \Drupal::service('renderer')->render($variables['page'][$region_name])) {
        $active_regions[] = $region_name;
      }
    }
  }

  if (!empty($active_regions)) {
    $variables['attributes']['class'][] = 'page';

    // This is where the heavy lifting takes place.
    $layout_loaded = new LayoutLoad($theme, $active_regions);
    $row_attributes = $layout_loaded->rowAttributes();

    // Check if we have attributes to avoid a fatal error.
    if (empty($row_attributes)) {
      drupal_set_message(t('uh oh... check the themes Appearance settings, or maybe the layout yml is borked?'), 'error');
    }
    else {
      $variables = $variables + $row_attributes;
    }
  }
}

/**
 * Preprocess variables for region templates.
 * @param $variables
 */
function at_core_preprocess_region(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // This tells a region what row they are in, could be expensive?
  $layout_loaded = new LayoutLoad($theme, $active_regions = NULL);
  $region_row = $layout_loaded->regionAttributes($variables['region']);
  if (!empty($region_row)) {
    $variables['region_row'] = $region_row;
  }

  // Set wrapper element. Required for BC. Deprecated.
  $variables['html_element'] = 'div';

  // Extension settings
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['page_classes_region_' . $variables['region']])) {
        $shortcodes = Tags::explode($config['page_classes_region_' . $variables['region']]);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
        }
      }
    }
  }
}

/**
 * Preprocess variables for node templates.
 * @param $variables
 */
function at_core_preprocess_node(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');
  $node = $variables['node'];

  // Extension settings
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['nodetype_classes_' . $node->getType()])) {
        $shortcodes = Tags::explode($config['nodetype_classes_' . $node->getType()]);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
        }
      }
    }
  }

  // Header and Footer attributes.
  $variables['header_attributes'] = new Attribute(array('class' => array()));
  $variables['footer_attributes'] = new Attribute(array('class' => array()));

  // SEE https://drupal.org/node/2004252 or a follow up issue.
  if ($variables['display_submitted']) {

    // Add a class to the header if submitted is active, so we can theme dynamically.
    $variables['header_attributes']['class'][] = 'node__header--has-meta';

    // Initialize new attributes arrays.
    $variables['meta_attributes'] = new Attribute(array('class' => array()));
    $variables['meta_attributes']['class'][] = 'node__meta';

    $variables['submitted_attributes'] = new Attribute(array('class' => array()));
    $variables['submitted_attributes']['class'][] = 'node__submitted';

    // Add a class if author picture is printing.
    // TODO - does this break the entity render cache?
    if ($author_picture = \Drupal::service('renderer')->render($variables['author_picture'])) {
      // TODO - does this fail if twig debugging is on?
      if (!empty($author_picture)) {
        $variables['meta_attributes']['class'][] = 'node__meta--has-author-picture';
      }
    }
  }
}

/**
 * Preprocess variables for comment templates.
 * @param $variables
 */
function at_core_preprocess_comment(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Initialize new attributes arrays.
  $variables['meta_attributes'] = new Attribute(array('class' => array()));
  $variables['meta_attributes']['class'][] = 'comment__meta';

  $variables['submitted_attributes'] = new Attribute(array('class' => array()));
  $variables['submitted_attributes']['class'][] = 'comment__submitted';

  // Add a class if user picture is printing. Render early.
  if ($user_picture = \Drupal::service('renderer')->render($variables['user_picture'])) {
    // TODO - does this fail if twig debugging is on?
    if (!empty($user_picture)) {
      $variables['meta_attributes']['class'][] = 'comment__meta--has-user-picture';
    }
  }

  // Use permalink URI as the title link.
  $comment = $variables['elements']['#comment'];
  if (!isset($comment->in_preview)) {
    $uri = $comment->permalink();
    $attributes = $uri->getOption('attributes') ?: array();
    $attributes += array('class' => array('permalink'), 'rel' => 'bookmark');
    $uri->setOption('attributes', $attributes);
    $variables['title'] = \Drupal::l($comment->getSubject(), $uri);
  }

  // Hide comment titles.
  $variables['title_visibility'] = TRUE;
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      if (isset($config['comments_hide_title']) && $config['comments_hide_title'] === 1) {
        $variables['title_visibility'] = FALSE;
      }
    }
  }
}

/**
 * Preprocess variables for block templates.
 * @param $variables
 */
function at_core_preprocess_block(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {

    // Responsive menu block.
    if (isset($config['responsive_menu_block'])) {
      if ($variables['elements']['#id'] == $config['responsive_menu_block']) {
        $variables['attributes']['class'][] = 'rm-block'; // main class that sets this as the responsive menu block
        $variables['attributes']['class'][] = 'js-hide';  // hides the block until the dom is ready
        $variables['title_attributes']['class'][] = 'rm-toggle'; // set a class for the js toggles
        $variables['title_attributes']['aria-controls'][] = 'rm-content';  // aria controls
        $variables['content_attributes']['id'][] = 'rm-content'; // target id for aria controls
        $variables['content_attributes']['class'][] = 'rm-block__content'; // toggle target, the div that actually opens/closes
      }
    }

    // Markup overrides
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      // Remove login block links.
      if ($variables['base_plugin_id'] == 'user_login_block') {
        if ((isset($config['login_block_remove_links']) && $config['login_block_remove_links'] === 1) || (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1)) {
          unset($variables['content']['user_links']);

          // Add class for horizontal login.
          if (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1) {
            $variables['attributes']['class'][] = 'is-horizontal';
          }
        }
      }
    }

    // Shortcodes classes.
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['block_classes_' . $variables['elements']['#id']])) {
        $shortcodes = Tags::explode($config['block_classes_' . $variables['elements']['#id']]);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
        }
      }
    }
  }
}

/**
 * Preprocess variables for image field templates.
 * @param $variables
 */
function at_core_preprocess_field__image(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_images']) && $config['enable_images'] === 1) {

      $entity_type = $variables['element']['#entity_type'];
      $node_type = $variables['element']['#bundle'];
      $view_mode = $variables['element']['#view_mode'];

      // Reset items array to first item only. This causes only the first image
      // to be shown, e.g. in teaser view mode.
      if (isset($config['image_count_' . $node_type . '_' . $entity_type . '_' . $view_mode]) && $config['image_count_' . $node_type . '_' . $entity_type . '_' . $view_mode] === 1) {
        $item = reset($variables['items']);
        $variables['items'] = array($item);
      }

      // Captions.
      if (isset($config['image_captions_' . $node_type . '_' . $entity_type . '_' . $view_mode]) && $config['image_captions_' . $node_type . '_' . $entity_type . '_' . $view_mode] === 1) {
        foreach ($variables['items'] as $delta => $item) {
          $values = $item['content']['#item']->getValue();
          if (!empty($values['title'])) {
            $variables['items'][$delta]['caption'] = array(
              'show' => TRUE,
              'title' => $values['title'],
            );
          }
          else {
            $variables['items'][$delta]['caption'] = array(
              'show' => FALSE,
            );
          }
        }
      }

      // Image align class, provide a variable for use in field template.
      $variables['image_align'] = 'align-none';
      if (!empty($config['image_alignment_' . $node_type . '_' . $entity_type . '_' . $view_mode])) {
        $variables['image_align'] = 'align-' . $config['image_alignment_' . $node_type . '_' . $entity_type . '_' . $view_mode];
      }

      // This is quite aggressive and it may be better to let the site fail?
      foreach ($variables['items'] as $delta => $item) {
        if (empty($item['content']['#image_style'])) {
          $variables['attributes']['class'][] = 'float-none';
        }
      }
    }
  }
}

/**
 * Preprocess variables for breadcrumb templates.
 * @param $variables
 */
function at_core_preprocess_breadcrumb(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // New attributes array for breadcrumb title.
  $variables['title_attributes'] = new Attribute(array('class' => array()));

  // Set attributes.
  $variables['breadcrumb_title_hidden'] = TRUE;

  // If home is the only item, remove it.
  $arr_length = count($variables['breadcrumb']);
  if ($arr_length == 1 && $variables['breadcrumb'][0]['url'] == base_path()) {
    unset($variables['breadcrumb'][0]);
  }

  // Theme settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {

      // Show or hide the label.
      if (isset($config['breadcrumb_label']) && $config['breadcrumb_label'] === 1) {
        $variables['breadcrumb_title_hidden'] = FALSE;
      }

      // Show or hide the Home link.
      if (isset($config['breadcrumb_home']) && $config['breadcrumb_home'] === 1) {
        $first_item = array_values($variables['breadcrumb'])[0];
        if (isset($first_item['url']) && $first_item['url'] == base_path()) {
          array_shift($variables['breadcrumb']);
        }
      }
    }
  }
}

/**
 * Preprocess variables for user templates.
 * @param $variables
 */
function at_core_preprocess_user(&$variables) {
  // Add a proper label for user profiles.
  $user = $variables['elements']['#user'];
  $variables['label'] = $user->getDisplayName();
}

/**
 * Preprocess variables for user templates.
 * @param $variables
 */
function at_core_preprocess_views_view(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Theme settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      if (isset($config['views_hide_feedicon']) && $config['views_hide_feedicon'] === 1) {
        $variables['feed_icons'] = array();
      }
    }
  }
}

/**
 * Preprocess variables for menu templates.
 * @param $variables
 */
function at_core_preprocess_menu(&$variables) {
  // Add a somewhat useful class to the root UL in menus.
  if (isset($variables['theme_hook_original'])) {
    $menu_name = str_replace('menu__', '', $variables['theme_hook_original']);
    $variables['attributes']['class'][] = 'menu-name-original--' . Html::cleanCssIdentifier($menu_name);
  }
}

/**
 * Preprocess variables for forums templates.
 * @param $variables
 */
function at_core_preprocess_forums(&$variables) {
  // Add a class to each forum topic table header td.
  if (isset($variables['topics']['#header'])) {
    foreach ($variables['topics']['#header'] as $topic_list_key => $topic_list_value) {
      $variables['topics']['#header'][$topic_list_key]['class'][] = 'forum-header__' . Html::cleanCssIdentifier($variables['topics']['#header'][$topic_list_key]['data']);
    }
  }

  // Add BEM classes to row items to match the forum-list.html.twig BEM classes.
  if (isset($variables['topics']['#rows'])) {
    foreach ($variables['topics']['#rows'] as $row_key => $row_values) {
      foreach ($row_values as $row_values_key => $row_values_value) {
        foreach ($row_values_value['class'] as $class_key => $class_value) {
          $variables['topics']['#rows'][$row_key][$row_values_key]['class'][] = 'forum-list__' . $class_value;
          unset($variables['topics']['#rows'][$row_key][$row_values_key]['class'][$class_key]);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 * @param $variables
 */
function at_core_preprocess_maintenance_page(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  // Load the maintenance library CSS.
  $variables['#attached']['library'][] = $theme . '/maintenance_page';
}
